#! /bin/sh

#############
# Variables #
#############

PANEL_FIFO="$HOME/.config/panel/fifo"
PANEL_HEIGHT="16"

COLOR_FOREGROUND='#FFA3A6AB'
COLOR_BACKGROUND='#FF34322E'
COLOR_ACTIVE_MONITOR_FG='#FF34322E'
COLOR_ACTIVE_MONITOR_BG='#FF58C5F1'
COLOR_INACTIVE_MONITOR_FG='#FF58C5F1'
COLOR_INACTIVE_MONITOR_BG='#FF34322E'
COLOR_FOCUSED_OCCUPIED_FG='#FFF6F9FF'
COLOR_FOCUSED_OCCUPIED_BG='#FF5C5955'
COLOR_FOCUSED_FREE_FG='#FFF6F9FF'
COLOR_FOCUSED_FREE_BG='#FF6D561C'
COLOR_FOCUSED_URGENT_FG='#FF34322E'
COLOR_FOCUSED_URGENT_BG='#FFF9A299'
COLOR_OCCUPIED_FG='#FFA3A6AB'
COLOR_OCCUPIED_BG='#FF34322E'
COLOR_FREE_FG='#FF6F7277'
COLOR_FREE_BG='#FF34322E'
COLOR_URGENT_FG='#FFF9A299'
COLOR_URGENT_BG='#FF34322E'
COLOR_LAYOUT_FG='#FFA3A6AB'
COLOR_LAYOUT_BG='#FF34322E'
COLOR_TITLE_FG='#FFA3A6AB'
COLOR_TITLE_BG='#FF34322E'
COLOR_STATUS_FG='#FFA3A6AB'
COLOR_STATUS_BG='#FF34322E'

BRIGHTNESS_COLOR='#FFFF9D00'

BATTERY_FULL_COLOR='#FF00FF0C'
BATTERY_LOW_COLOR='#FFFFCC00'
BATTERY_EMPTY_COLOR='#FFFF002A'

NETWORK_COLOR='#FF00BFFF'

##########################
# Preparations for panel #
##########################

# Kill any open panel processes.
while [ $(pgrep -cx panel) -gt 1 ] ; do
	pkill -ox -9 panel
done

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

bspc config top_padding $PANEL_HEIGHT

####################
# Helper functions #
####################

function clock {
    while true; do
        TZ=Europe/Helsinki date +"S%d/%m %H:%M"
        sleep 1
    done
}

function alsa_master_volume {
    while true; do
        left_volume=`amixer get Master | sed -n 's/^.*\[\([0-9]\+\)%.*$/\1/p' | uniq | sed -n '1p'`
        right_volume=`amixer get Master | sed -n 's/^.*\[\([0-9]\+\)%.*$/\1/p' | uniq | sed -n '2p'`
        sound_on=`amixer get Master | sed -n 's/^.*\[\([off]\+\).*$/\1/p' | uniq`

        if [ $sound_on == "off" ]; then
            icon="\uf026\uf00d"
        elif [ $left_volume -gt "60" ] || [ $right_volume -gt "60" ]; then
            icon="\uf028"
        elif [ $left_volume -gt "30" ] || [ $right_volume -gt "30" ]; then
            icon="\uf027"
        elif [ $left_volume -gt "0" ] || [ $right_volume -gt "0" ]; then
            icon="\uf026"
        else
            icon="\uf026\uf00d"
        fi

        if [ "$right_volume" ]; then
            right_volume="/$right_volume%"
        fi

        echo -e "A$left_volume%$right_volume $icon"
        sleep 1
    done
}

BAT="/sys/class/power_supply/BAT1"

function battery {
    while true; do
        STATUS=`cat $BAT/status`
        CAPACITY=`cat $BAT/capacity`
        AC_ONLINE=`cat /sys/class/power_supply/AC/online`

        if [ $STATUS == "Charging" ]; then
            STATUS="%{F$BATTERY_LOW_COLOR}\uf0e7 "
        elif [ $AC_ONLINE == "1" ]; then
            STATUS="\uf1e6 "
        else
            STATUS=""
        fi

        if [ $CAPACITY -gt "90" ]; then
            CAPACITY="%{F$BATTERY_FULL_COLOR}\uf240"
        elif [ $CAPACITY -gt "75" ]; then
            CAPACITY="%{F$BATTERY_FULL_COLOR}\uf241"
        elif [ $CAPACITY -gt "50" ]; then
            CAPACITY="%{F$BATTERY_LOW_COLOR}\uf242"
        elif [ $CAPACITY -gt "25" ]; then
            CAPACITY="%{F$BATTERY_LOW_COLOR}\uf243"
        else
            CAPACITY="%{F$BATTERY_EMPTY_COLOR}\uf244"
        fi

        echo -e "B$STATUS$CAPACITY%{F-}"
        sleep 1
    done
}

function connman_networkstatus () {
    while true; do
        ethernet=`connmanctl technologies | grep -A 5 technology/ethernet | grep Connected | awk '{print $3}'`
        wifi=`connmanctl technologies | grep -A 5 technology/wifi | grep Connected | awk '{print $3}'`
        bluetooth=`connmanctl technologies | grep -A 5 technology/bluetooth | grep Connected | awk '{print $3}'`

        if [ $ethernet == "True" ]; then
            ethernet="\uf26b"
        else
            ethernet=""
        fi

        if [ $wifi == "True" ]; then
            wifi="\uf1eb"
        else
            wifi=""
        fi

        if [ $bluetooth == "True" ]; then
            bluetooth="\uf293"
        else
            bluetooth=""
        fi

        echo -e "C$ethernet$wifi$bluetooth"
        sleep 1
    done
}

max_brightness=`cat /sys/class/backlight/intel_backlight/max_brightness`

function brightness () {
    while true; do
        cur_brightness=`cat /sys/class/backlight/intel_backlight/brightness`
        echo -e "b$((100*$cur_brightness/$max_brightness))% \uf185"
        sleep 1
    done
}

################
# Pipe to fifo #
################

clock > "$PANEL_FIFO" &
bspc subscribe > "$PANEL_FIFO" &
alsa_master_volume > "$PANEL_FIFO" &

if [[ $(hostname) == 'serendipity' ]]; then
    battery > "$PANEL_FIFO" &
    brightness > "$PANEL_FIFO" &
    connman_networkstatus > "$PANEL_FIFO" &
fi

#################
# Lemonbar pipe #
#################

function panel_bar {
    num_mon=$(bspc query -M | wc -l)
    wm_info_array=("" "" "")
    while read line < $PANEL_FIFO; do
        case $line in
            S*)
                date="${line#?}"
                ;;
            A*)
                volume="${line#?}"
                ;;
            B*)
                percent="${line#?}"
                ;;
            b*)
                brightness="%{F$BRIGHTNESS_COLOR}${line#?}%{F-}"
                ;;
            C*)
                connection="%{F$NETWORK_COLOR}${line#?}%{F-}"
                ;;
            W*)
                cur_mon=-1
                monitor_info=""
                reset_colors="%{-u}%{B-}%{F-}"
                IFS=':'
                set -- ${line#?}
                while [ $# -gt 0 ]; do
                    item=$1
                    name=${item#?}
                    case $item in
                        M*)
                            # active monitor
                            cur_mon=$((cur_mon + 1))
                            monitor_info=""
                            ;;
                        m*)
                            # inactive monitor
                            cur_mon=$((cur_mon + 1))
                            monitor_info=""
                            ;;
                        O*)
                            # focused occupied desktop
                            colors="%{F$COLOR_FOCUSED_OCCUPIED_FG}%{B$COLOR_FOCUSED_OCCUPIED_BG}%{+u}"
                            monitor_info="$monitor_info$colors $name $reset_colors|"
                            ;;
                        F*)
                            # focused free desktop
                            colors="%{F$COLOR_FOCUSED_FREE_FG}%{B$COLOR_FOCUSED_FREE_BG}%{+u}"
                            monitor_info="$monitor_info$colors $name $reset_colors|"
                            ;;
                        U*)
                            # focused urgent desktop
                            colors="%{F$COLOR_FOCUSED_URGENT_FG}%{B$COLOR_FOCUSED_URGENT_BG}%{+u}"
                            monitor_info="$monitor_info$colors $name $reset_colors|"
                            ;;
                        o*)
                            # occupied desktop
                            colors="%{F$COLOR_OCCUPIED_FG}%{B$COLOR_OCCUPIED_BG}"
                            monitor_info="$monitor_info$colors $name $reset_colors|"
                            ;;
                        f*)
                            # free desktop
                            ;;
                        u*)
                            # urgent desktop
                            colors="%{F$COLOR_URGENT_FG}%{B$COLOR_URGENT_BG}"
                            monitor_info="$monitor_info$colors $name $reset_colors|"
                            ;;
                        L*)
                            # layout of the focused desktop
                            ;;
                    esac
                    shift
                    wm_info_array[cur_mon]="$monitor_info"
                done
                ;;
        esac

        result=""
        right_side="%{r}$connection  $volume  $brightness  $percent  $date"

        if [[ $(hostname) == 'destiny' ]]; then
            result="$result%{S0}%{l}${wm_info_array[1]}$right_side"
            result="$result%{S1}%{l}${wm_info_array[0]}$right_side"
            result="$result%{S2}%{l}${wm_info_array[2]}$right_side"
        else
            result="${wm_info_array[0]}$right_side"
        fi

        printf "%s\n" "$result"
    done
}

panel_bar | lemonbar -g x$PANEL_HEIGHT -F "$COLOR_FOREGROUND" -B "$COLOR_BACKGROUND" -f "Droid Sans-10" -f "FontAwesome-12" | sh &

wait
